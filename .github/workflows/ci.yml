name: CI

on:
  push:
    branches: [ "master" ]
    tags:
      - '*'
  pull_request:
    branches: [ "master" ]

permissions:
  contents: write

jobs:

  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache: 'true'

      - name: Compile binary
        run: go build -v ./

      - name: Run Tests
        run: go test -v -cover -race ./...

  build:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs:
      - test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go environment
        id: setup-go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: Get build data
        run: |
          echo "BUILD_REVISION=${GITHUB_SHA::7}" >> $GITHUB_ENV
          echo "BUILD_TIME=$(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_ENV

      - name: Use short SHA as a version number
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: echo "BUILD_VERSION=devel-${BUILD_REVISION}" >> $GITHUB_ENV

      - name: Use tag as a version number
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: echo "BUILD_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Cache fyne-cross
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/fyne-cross
          key: ${{ runner.os }}-fyne-cache-${{ hashFiles('**/go.sum') }}

      - name: Package for Windows
        run: |
          go run -v github.com/fyne-io/fyne-cross@latest windows \
            -arch=amd64 \
            -debug \
            -ldflags="main.version=${BUILD_VERSION}" \
            -ldflags="main.commit=${BUILD_REVISION}" \
            -ldflags="main.date=${BUILD_TIME}" \
            -env="GOTOOLCHAIN=go1.24.4" \
            -tags=gui

      - name: Extract packaged app
        run: |
          ls -l "fyne-cross/dist/windows-amd64"
          unzip \
            "fyne-cross/dist/windows-amd64/Gladiator.exe.zip" \
            -d "dist"

      - name: Upload dev build as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: |
            dist/Gladiator.exe 

      - name: Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            dist/Gladiator.exe

  container:
    runs-on: ubuntu-latest
    needs:
      - test
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Go environment
        id: setup-go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: Get build data
        run: |
          echo "BUILD_REVISION=${GITHUB_SHA::7}" >> $GITHUB_ENV
          echo "BUILD_TIME=$(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_ENV

      - name: Use short SHA as a version number
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: echo "BUILD_VERSION=devel-${BUILD_REVISION}" >> $GITHUB_ENV

      - name: Use tag as a version number
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: echo "BUILD_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Build Go binary
        run: CGO_ENABLED=0 GOOS=linux GOARCH=amd64 \
          go build -ldflags="-s -w -X main.version=${BUILD_VERSION} -X main.commit=${BUILD_REVISION} -X main.date=${BUILD_TIME}" -o gladiator .

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build image
        run: |
          docker build \
            --build-arg BUILD_DATE="${BUILD_TIME}" \
            --build-arg VERSION="=${BUILD_VERSION}" \
            --build-arg GIT_COMMIT="${BUILD_REVISION}" \
            -t $IMAGE_NAME .
          docker push $IMAGE_NAME
        env:
          IMAGE_NAME: "ghcr.io/${{ github.repository_owner }}/gladiator:latest"

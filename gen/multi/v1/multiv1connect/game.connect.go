// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: multi/v1/game.proto

package multiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/dispel-re/dispel-multi/gen/multi/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GameServiceName is the fully-qualified name of the GameService service.
	GameServiceName = "multi.v1.GameService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GameServiceGetGameProcedure is the fully-qualified name of the GameService's GetGame RPC.
	GameServiceGetGameProcedure = "/multi.v1.GameService/GetGame"
	// GameServiceListGamesProcedure is the fully-qualified name of the GameService's ListGames RPC.
	GameServiceListGamesProcedure = "/multi.v1.GameService/ListGames"
	// GameServiceCreateGameProcedure is the fully-qualified name of the GameService's CreateGame RPC.
	GameServiceCreateGameProcedure = "/multi.v1.GameService/CreateGame"
	// GameServiceJoinGameProcedure is the fully-qualified name of the GameService's JoinGame RPC.
	GameServiceJoinGameProcedure = "/multi.v1.GameService/JoinGame"
	// GameServiceListPlayersProcedure is the fully-qualified name of the GameService's ListPlayers RPC.
	GameServiceListPlayersProcedure = "/multi.v1.GameService/ListPlayers"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	gameServiceServiceDescriptor           = v1.File_multi_v1_game_proto.Services().ByName("GameService")
	gameServiceGetGameMethodDescriptor     = gameServiceServiceDescriptor.Methods().ByName("GetGame")
	gameServiceListGamesMethodDescriptor   = gameServiceServiceDescriptor.Methods().ByName("ListGames")
	gameServiceCreateGameMethodDescriptor  = gameServiceServiceDescriptor.Methods().ByName("CreateGame")
	gameServiceJoinGameMethodDescriptor    = gameServiceServiceDescriptor.Methods().ByName("JoinGame")
	gameServiceListPlayersMethodDescriptor = gameServiceServiceDescriptor.Methods().ByName("ListPlayers")
)

// GameServiceClient is a client for the multi.v1.GameService service.
type GameServiceClient interface {
	GetGame(context.Context, *connect.Request[v1.GetGameRequest]) (*connect.Response[v1.GetGameResponse], error)
	ListGames(context.Context, *connect.Request[v1.ListGamesRequest]) (*connect.Response[v1.ListGamesResponse], error)
	CreateGame(context.Context, *connect.Request[v1.CreateGameRequest]) (*connect.Response[v1.CreateGameResponse], error)
	JoinGame(context.Context, *connect.Request[v1.JoinGameRequest]) (*connect.Response[v1.JoinGameResponse], error)
	ListPlayers(context.Context, *connect.Request[v1.ListPlayersRequest]) (*connect.Response[v1.ListPlayersResponse], error)
}

// NewGameServiceClient constructs a client for the multi.v1.GameService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGameServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GameServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &gameServiceClient{
		getGame: connect.NewClient[v1.GetGameRequest, v1.GetGameResponse](
			httpClient,
			baseURL+GameServiceGetGameProcedure,
			connect.WithSchema(gameServiceGetGameMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listGames: connect.NewClient[v1.ListGamesRequest, v1.ListGamesResponse](
			httpClient,
			baseURL+GameServiceListGamesProcedure,
			connect.WithSchema(gameServiceListGamesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createGame: connect.NewClient[v1.CreateGameRequest, v1.CreateGameResponse](
			httpClient,
			baseURL+GameServiceCreateGameProcedure,
			connect.WithSchema(gameServiceCreateGameMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		joinGame: connect.NewClient[v1.JoinGameRequest, v1.JoinGameResponse](
			httpClient,
			baseURL+GameServiceJoinGameProcedure,
			connect.WithSchema(gameServiceJoinGameMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listPlayers: connect.NewClient[v1.ListPlayersRequest, v1.ListPlayersResponse](
			httpClient,
			baseURL+GameServiceListPlayersProcedure,
			connect.WithSchema(gameServiceListPlayersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// gameServiceClient implements GameServiceClient.
type gameServiceClient struct {
	getGame     *connect.Client[v1.GetGameRequest, v1.GetGameResponse]
	listGames   *connect.Client[v1.ListGamesRequest, v1.ListGamesResponse]
	createGame  *connect.Client[v1.CreateGameRequest, v1.CreateGameResponse]
	joinGame    *connect.Client[v1.JoinGameRequest, v1.JoinGameResponse]
	listPlayers *connect.Client[v1.ListPlayersRequest, v1.ListPlayersResponse]
}

// GetGame calls multi.v1.GameService.GetGame.
func (c *gameServiceClient) GetGame(ctx context.Context, req *connect.Request[v1.GetGameRequest]) (*connect.Response[v1.GetGameResponse], error) {
	return c.getGame.CallUnary(ctx, req)
}

// ListGames calls multi.v1.GameService.ListGames.
func (c *gameServiceClient) ListGames(ctx context.Context, req *connect.Request[v1.ListGamesRequest]) (*connect.Response[v1.ListGamesResponse], error) {
	return c.listGames.CallUnary(ctx, req)
}

// CreateGame calls multi.v1.GameService.CreateGame.
func (c *gameServiceClient) CreateGame(ctx context.Context, req *connect.Request[v1.CreateGameRequest]) (*connect.Response[v1.CreateGameResponse], error) {
	return c.createGame.CallUnary(ctx, req)
}

// JoinGame calls multi.v1.GameService.JoinGame.
func (c *gameServiceClient) JoinGame(ctx context.Context, req *connect.Request[v1.JoinGameRequest]) (*connect.Response[v1.JoinGameResponse], error) {
	return c.joinGame.CallUnary(ctx, req)
}

// ListPlayers calls multi.v1.GameService.ListPlayers.
func (c *gameServiceClient) ListPlayers(ctx context.Context, req *connect.Request[v1.ListPlayersRequest]) (*connect.Response[v1.ListPlayersResponse], error) {
	return c.listPlayers.CallUnary(ctx, req)
}

// GameServiceHandler is an implementation of the multi.v1.GameService service.
type GameServiceHandler interface {
	GetGame(context.Context, *connect.Request[v1.GetGameRequest]) (*connect.Response[v1.GetGameResponse], error)
	ListGames(context.Context, *connect.Request[v1.ListGamesRequest]) (*connect.Response[v1.ListGamesResponse], error)
	CreateGame(context.Context, *connect.Request[v1.CreateGameRequest]) (*connect.Response[v1.CreateGameResponse], error)
	JoinGame(context.Context, *connect.Request[v1.JoinGameRequest]) (*connect.Response[v1.JoinGameResponse], error)
	ListPlayers(context.Context, *connect.Request[v1.ListPlayersRequest]) (*connect.Response[v1.ListPlayersResponse], error)
}

// NewGameServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGameServiceHandler(svc GameServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	gameServiceGetGameHandler := connect.NewUnaryHandler(
		GameServiceGetGameProcedure,
		svc.GetGame,
		connect.WithSchema(gameServiceGetGameMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gameServiceListGamesHandler := connect.NewUnaryHandler(
		GameServiceListGamesProcedure,
		svc.ListGames,
		connect.WithSchema(gameServiceListGamesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gameServiceCreateGameHandler := connect.NewUnaryHandler(
		GameServiceCreateGameProcedure,
		svc.CreateGame,
		connect.WithSchema(gameServiceCreateGameMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gameServiceJoinGameHandler := connect.NewUnaryHandler(
		GameServiceJoinGameProcedure,
		svc.JoinGame,
		connect.WithSchema(gameServiceJoinGameMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gameServiceListPlayersHandler := connect.NewUnaryHandler(
		GameServiceListPlayersProcedure,
		svc.ListPlayers,
		connect.WithSchema(gameServiceListPlayersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/multi.v1.GameService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GameServiceGetGameProcedure:
			gameServiceGetGameHandler.ServeHTTP(w, r)
		case GameServiceListGamesProcedure:
			gameServiceListGamesHandler.ServeHTTP(w, r)
		case GameServiceCreateGameProcedure:
			gameServiceCreateGameHandler.ServeHTTP(w, r)
		case GameServiceJoinGameProcedure:
			gameServiceJoinGameHandler.ServeHTTP(w, r)
		case GameServiceListPlayersProcedure:
			gameServiceListPlayersHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGameServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGameServiceHandler struct{}

func (UnimplementedGameServiceHandler) GetGame(context.Context, *connect.Request[v1.GetGameRequest]) (*connect.Response[v1.GetGameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("multi.v1.GameService.GetGame is not implemented"))
}

func (UnimplementedGameServiceHandler) ListGames(context.Context, *connect.Request[v1.ListGamesRequest]) (*connect.Response[v1.ListGamesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("multi.v1.GameService.ListGames is not implemented"))
}

func (UnimplementedGameServiceHandler) CreateGame(context.Context, *connect.Request[v1.CreateGameRequest]) (*connect.Response[v1.CreateGameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("multi.v1.GameService.CreateGame is not implemented"))
}

func (UnimplementedGameServiceHandler) JoinGame(context.Context, *connect.Request[v1.JoinGameRequest]) (*connect.Response[v1.JoinGameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("multi.v1.GameService.JoinGame is not implemented"))
}

func (UnimplementedGameServiceHandler) ListPlayers(context.Context, *connect.Request[v1.ListPlayersRequest]) (*connect.Response[v1.ListPlayersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("multi.v1.GameService.ListPlayers is not implemented"))
}

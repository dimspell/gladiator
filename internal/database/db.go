// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0

package database

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addPlayerToRoomStmt, err = db.PrepareContext(ctx, addPlayerToRoom); err != nil {
		return nil, fmt.Errorf("error preparing query AddPlayerToRoom: %w", err)
	}
	if q.createCharacterStmt, err = db.PrepareContext(ctx, createCharacter); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCharacter: %w", err)
	}
	if q.createGameRoomStmt, err = db.PrepareContext(ctx, createGameRoom); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGameRoom: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteCharacterStmt, err = db.PrepareContext(ctx, deleteCharacter); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCharacter: %w", err)
	}
	if q.findCharacterStmt, err = db.PrepareContext(ctx, findCharacter); err != nil {
		return nil, fmt.Errorf("error preparing query FindCharacter: %w", err)
	}
	if q.getCurrentUserStmt, err = db.PrepareContext(ctx, getCurrentUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetCurrentUser: %w", err)
	}
	if q.getGameRoomStmt, err = db.PrepareContext(ctx, getGameRoom); err != nil {
		return nil, fmt.Errorf("error preparing query GetGameRoom: %w", err)
	}
	if q.getGameRoomPlayersStmt, err = db.PrepareContext(ctx, getGameRoomPlayers); err != nil {
		return nil, fmt.Errorf("error preparing query GetGameRoomPlayers: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.listCharactersStmt, err = db.PrepareContext(ctx, listCharacters); err != nil {
		return nil, fmt.Errorf("error preparing query ListCharacters: %w", err)
	}
	if q.listGameRoomsStmt, err = db.PrepareContext(ctx, listGameRooms); err != nil {
		return nil, fmt.Errorf("error preparing query ListGameRooms: %w", err)
	}
	if q.selectRankingStmt, err = db.PrepareContext(ctx, selectRanking); err != nil {
		return nil, fmt.Errorf("error preparing query SelectRanking: %w", err)
	}
	if q.updateCharacterInventoryStmt, err = db.PrepareContext(ctx, updateCharacterInventory); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCharacterInventory: %w", err)
	}
	if q.updateCharacterSpellsStmt, err = db.PrepareContext(ctx, updateCharacterSpells); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCharacterSpells: %w", err)
	}
	if q.updateCharacterStatsStmt, err = db.PrepareContext(ctx, updateCharacterStats); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCharacterStats: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addPlayerToRoomStmt != nil {
		if cerr := q.addPlayerToRoomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addPlayerToRoomStmt: %w", cerr)
		}
	}
	if q.createCharacterStmt != nil {
		if cerr := q.createCharacterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCharacterStmt: %w", cerr)
		}
	}
	if q.createGameRoomStmt != nil {
		if cerr := q.createGameRoomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGameRoomStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteCharacterStmt != nil {
		if cerr := q.deleteCharacterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCharacterStmt: %w", cerr)
		}
	}
	if q.findCharacterStmt != nil {
		if cerr := q.findCharacterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findCharacterStmt: %w", cerr)
		}
	}
	if q.getCurrentUserStmt != nil {
		if cerr := q.getCurrentUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCurrentUserStmt: %w", cerr)
		}
	}
	if q.getGameRoomStmt != nil {
		if cerr := q.getGameRoomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGameRoomStmt: %w", cerr)
		}
	}
	if q.getGameRoomPlayersStmt != nil {
		if cerr := q.getGameRoomPlayersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGameRoomPlayersStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.listCharactersStmt != nil {
		if cerr := q.listCharactersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listCharactersStmt: %w", cerr)
		}
	}
	if q.listGameRoomsStmt != nil {
		if cerr := q.listGameRoomsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listGameRoomsStmt: %w", cerr)
		}
	}
	if q.selectRankingStmt != nil {
		if cerr := q.selectRankingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing selectRankingStmt: %w", cerr)
		}
	}
	if q.updateCharacterInventoryStmt != nil {
		if cerr := q.updateCharacterInventoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCharacterInventoryStmt: %w", cerr)
		}
	}
	if q.updateCharacterSpellsStmt != nil {
		if cerr := q.updateCharacterSpellsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCharacterSpellsStmt: %w", cerr)
		}
	}
	if q.updateCharacterStatsStmt != nil {
		if cerr := q.updateCharacterStatsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCharacterStatsStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                           DBTX
	tx                           *sql.Tx
	addPlayerToRoomStmt          *sql.Stmt
	createCharacterStmt          *sql.Stmt
	createGameRoomStmt           *sql.Stmt
	createUserStmt               *sql.Stmt
	deleteCharacterStmt          *sql.Stmt
	findCharacterStmt            *sql.Stmt
	getCurrentUserStmt           *sql.Stmt
	getGameRoomStmt              *sql.Stmt
	getGameRoomPlayersStmt       *sql.Stmt
	getUserStmt                  *sql.Stmt
	listCharactersStmt           *sql.Stmt
	listGameRoomsStmt            *sql.Stmt
	selectRankingStmt            *sql.Stmt
	updateCharacterInventoryStmt *sql.Stmt
	updateCharacterSpellsStmt    *sql.Stmt
	updateCharacterStatsStmt     *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                           tx,
		tx:                           tx,
		addPlayerToRoomStmt:          q.addPlayerToRoomStmt,
		createCharacterStmt:          q.createCharacterStmt,
		createGameRoomStmt:           q.createGameRoomStmt,
		createUserStmt:               q.createUserStmt,
		deleteCharacterStmt:          q.deleteCharacterStmt,
		findCharacterStmt:            q.findCharacterStmt,
		getCurrentUserStmt:           q.getCurrentUserStmt,
		getGameRoomStmt:              q.getGameRoomStmt,
		getGameRoomPlayersStmt:       q.getGameRoomPlayersStmt,
		getUserStmt:                  q.getUserStmt,
		listCharactersStmt:           q.listCharactersStmt,
		listGameRoomsStmt:            q.listGameRoomsStmt,
		selectRankingStmt:            q.selectRankingStmt,
		updateCharacterInventoryStmt: q.updateCharacterInventoryStmt,
		updateCharacterSpellsStmt:    q.updateCharacterSpellsStmt,
		updateCharacterStatsStmt:     q.updateCharacterStatsStmt,
	}
}

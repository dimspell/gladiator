// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2

package sqlite

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createAuthorStmt, err = db.PrepareContext(ctx, createAuthor); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAuthor: %w", err)
	}
	if q.createGameRoomStmt, err = db.PrepareContext(ctx, createGameRoom); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGameRoom: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteAuthorStmt, err = db.PrepareContext(ctx, deleteAuthor); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAuthor: %w", err)
	}
	if q.getAuthorStmt, err = db.PrepareContext(ctx, getAuthor); err != nil {
		return nil, fmt.Errorf("error preparing query GetAuthor: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.listAuthorsStmt, err = db.PrepareContext(ctx, listAuthors); err != nil {
		return nil, fmt.Errorf("error preparing query ListAuthors: %w", err)
	}
	if q.listCharactersStmt, err = db.PrepareContext(ctx, listCharacters); err != nil {
		return nil, fmt.Errorf("error preparing query ListCharacters: %w", err)
	}
	if q.listGameRoomsStmt, err = db.PrepareContext(ctx, listGameRooms); err != nil {
		return nil, fmt.Errorf("error preparing query ListGameRooms: %w", err)
	}
	if q.updateAuthorStmt, err = db.PrepareContext(ctx, updateAuthor); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAuthor: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createAuthorStmt != nil {
		if cerr := q.createAuthorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAuthorStmt: %w", cerr)
		}
	}
	if q.createGameRoomStmt != nil {
		if cerr := q.createGameRoomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGameRoomStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteAuthorStmt != nil {
		if cerr := q.deleteAuthorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAuthorStmt: %w", cerr)
		}
	}
	if q.getAuthorStmt != nil {
		if cerr := q.getAuthorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAuthorStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.listAuthorsStmt != nil {
		if cerr := q.listAuthorsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAuthorsStmt: %w", cerr)
		}
	}
	if q.listCharactersStmt != nil {
		if cerr := q.listCharactersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listCharactersStmt: %w", cerr)
		}
	}
	if q.listGameRoomsStmt != nil {
		if cerr := q.listGameRoomsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listGameRoomsStmt: %w", cerr)
		}
	}
	if q.updateAuthorStmt != nil {
		if cerr := q.updateAuthorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAuthorStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                 DBTX
	tx                 *sql.Tx
	createAuthorStmt   *sql.Stmt
	createGameRoomStmt *sql.Stmt
	createUserStmt     *sql.Stmt
	deleteAuthorStmt   *sql.Stmt
	getAuthorStmt      *sql.Stmt
	getUserStmt        *sql.Stmt
	listAuthorsStmt    *sql.Stmt
	listCharactersStmt *sql.Stmt
	listGameRoomsStmt  *sql.Stmt
	updateAuthorStmt   *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                 tx,
		tx:                 tx,
		createAuthorStmt:   q.createAuthorStmt,
		createGameRoomStmt: q.createGameRoomStmt,
		createUserStmt:     q.createUserStmt,
		deleteAuthorStmt:   q.deleteAuthorStmt,
		getAuthorStmt:      q.getAuthorStmt,
		getUserStmt:        q.getUserStmt,
		listAuthorsStmt:    q.listAuthorsStmt,
		listCharactersStmt: q.listCharactersStmt,
		listGameRoomsStmt:  q.listGameRoomsStmt,
		updateAuthorStmt:   q.updateAuthorStmt,
	}
}
